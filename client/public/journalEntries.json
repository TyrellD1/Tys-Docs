[
    {
        "header": "React JSON RESTful API",
        "date": "8/25/2021",
        "time": "11:16pm",
        "body": "As Search App Architecture states in this <a href='https://searchapparchitecture.techtarget.com/definition/RESTful-API' target='_blank' >article</a> a RESTful Api is - A RESTful API is an architectural style for an application program interface (API) that uses HTTP requests to access and use data. That data can be used to GET, PUT, POST and DELETE data types, which refers to the reading, updating, creating and deleting of operations concerning resources. <br/><br/> Under that definition I added the ability to get data from the journal entries JSON file in a RESTful fashion. Originally I created an infinite loop because I put setState in the last .then() attached to the fetch(). This created an infitie loop because everytime I setState it re rendered the component which would re run that api fetch and then setState again, which would restart it again, which created the loop. I fixed this by researching and finding that you could fix this with 'componentDidMount' or onMount with class based components and since I'm using hooks I knew to use useEffect instead, which fixed it right away, and then adding body to the useEffect dependencies (what's in the brackets).",
        "id": "1"
    },
    {
        "header": "AWS Training + Copy to Clipboard",
        "date": "8/26/21",
        "time": "12:49pm",
        "body": "In studying CloudFormation my fundamental understading of it is it makes it easier to provision and configure your different AWS services using what it calls stacks, in a simple text file. To be transparent that is my understanding at this time and that is susceptible to future change. Here's a good article that explains it: <a href='https://www.lucidchart.com/blog/cloud/why-you-should-be-using-cloudformation' target='_blank'>Article</a> and here's the <a href='https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html' target='_blank'>AWS CloudFormation Docs.</a> <br/><br/> I spent an hour of training today, in which I learned about CloudFormation which was mentioned before, but also AWS Monitoring & Auditing with <a href='https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html' target='_blank'>CloudWatch.</a> CloudWatch provides us metrics for every service in AWS. The metrics are generally geared towards measuring performance (CPUUtilization as an example). <br/><br/> You can analyze CloudWatch Data in CloudWatch > Metrics. This is a fairly well feature analytics platform that let's you toggle your graph type, add to dashboard, share, and download as CSV. (I'm sure they will continue to add plenty of other features) <br/><br/> An important part of CloudWatch is CloudWatch Logs. Logs seem to contain log streams and log groups that essentially seem to be a way to manage logs. <br/><br/> Before you define a log stream you must understand a log event. A log event is just a record of some activity or resource being monitored in AWS, they contain two properties: the timestamp of when it happened and the message of what the event was. <br/><br/> A log stream, according to <a href='' target='_blank'>AWS</a> is a sequence of these log events we just defined that share the same source. <br/><br/> A log group is a group of log streams (so not from the same source inherently) that have the same retention, monitoring and access control settings. A log group can have unlimited log streams in it. So basically a log stream is a collection of logs from a single source, and a log group is a collection of those streams that you put together because you want to monitor them similarly <br/><br/> To get CloudWatch Logs for EC2 you need to run what's called a CloudWatch agent on your EC2 instance to push the log files you want to CloudWatch Logs. <br/><br/> You can filter your Cloudwatch Logs fairly easily, you can filter for stuff like a specific IP address, you can filter out how many times 'ERROR' occured in your logs, and I'm sure many many other things. <br/><br/> At this point I'm transitioning to coding React and solving React based problems. The first of which was writing inside a 'code' tag in react. The way I did it was using brackets inside the Code tag and then a string template literal inside of that. And putting the code in there as is and then styling the code element a white-space of pre-wrap. <br/><br/> I created a copy to clipboard component in react that copies code to clipboard, the function that copies it is a simple navigator.clipboard.writeText(code) and 'code' is the prop passed in that's copied. It's also passed into a 'code' tag.",
        "id": "2"
    },
    {
        "header": "React Router w/ TypeScript",
        "date": "8/27/21",
        "time": "6:07pm",
        "body": "Started the coding day by including React Router w/ a navbar in TypeScript, using the NavLink for the links because it supports active link classes and seems syntatically appropriate with no real downside. What I had to do was install separate dependencies because it was TypeScript, which were: <br/><br/> npm i --save-dev @types/react-router @types/react-router-dom <br/><br/> Other than that using it with TypeScript was really no different than JavaScript. I would expect this to be a common thing with installing node packages. <br/><br/> I next coded the anchor tags so they were 100% of the height of the parent element. To align the text to the center of the NavLink or anchor tag what you have to do though or what I did was give it a display of flex a flex direction of column and then justify content of center and that aligns it center. You could probably do flex direction row and align-items center which would really make more sense because it'd make it easier to add, say an Icon after the text. <br/><br/> Just changed it to the above way and it still works! Both solutions may only work because the parent nav is flex as well, that is something to test. - Nope that mechanic specifically still seems to work even if parent container is different. <br/><br/> What I'm trying to do is make the top of the dropdown align with the bottom of the navbar evenly. Removing the margin from the ul element appears to be a significan start. Replacing with padding if neccessary makes sense at this stage. <br/><br/> Appears we got it. removing the margin from the ul and adding a top 100% looks to be a concrete solution. Have to get li right in ul, it seemed aligned right but what it really was was the ul had left padding.",
        "id": "3"
    },
    {
        "header": "AWS CloudWatch Events + More",
        "date": "8/28/21",
        "time": "10:17am",
        "body": "In SNS (Simple notification service), a message channel is just called a topic. You can use email notifications here for instance, and what you do is create the topic and then subscribe users to the topic by entering their email (if using email) and then it sends them an email they must confirm to recieve these notfications from SNS. <br/><br/> Amazon EventBridge essentially exists separately from CloudWatch right now but is really just a superset that will replace it. <br/><br/> Defined a big app where everything is sort of in one service as a 'monolith' vs. and app with a lot of microservices. This terminology should be compatible with describing an app with a lot of components as opposed to an app with one big file being a monolith. <br/><br/> I created a file for universal values in a React TS project. Here's the syntax I used to export files properly export const blankName = 'Put value here'. This is repeatable, and then you just import { ConstName } from './filepath'. <br/><br/> When editing the navbar in order to get the links in a smaller container I just created a container div them inside of the navbar and gave it a width of 50% and the navbars properties automatically centered it for me. So now the links are only spanning 50% of the width of the navbar. Cubic Bezier is used to create multiple transition points so that your transition can happen at different speeds at different parts of the transition, still encompassing the total speed of transition. <br/><br/> Working with Router it appears Links only will update the page dynamically if they're inside the same Router tags as the Route tags, so as a rule of thumb it's generally best to wrap your whole app in router tags and then use all other tags throughout all other components inside that same router (however it may be useful to use Router tags inside of this if you wanted to give more nav options, for instance in a JavaScript section give more JavaScript nav options than if you were just clicking on it in your master navbar). <br/><br/> Was working on getting the dropdown links to not break word, the way it was accomplished was putting <br/><br/> 'white-space:nowrap' <br/><br/> on the links. <br/><br/> Working on implementing multiple color modes. Using all inline styles in react to do it. My challenge is creating an individual hover effect with anchor tags, I tried using state and toggling it onMouseEnter and onMouseLeave, but the problem is to do that right I'd have create an individual state for every link which is messy and not really scalable. So instead I'm implementing a styles object, which was my original plan which proved to require different things because of TypeScript. I am now going to figure out how to implement the style object correctly including '&:hover' with TypeScript. <br/><br/> I solved the problem. I created a universal component for every dropdown link and then put state inside of their so that it was duplicatable and would only highlight the proper link, and then just passed in the values via",
        "id": "4"
    },
    {
        "header": "Color Modes + more",
        "date": "8/29/21",
        "time": "9:43am",
        "body": "Today I got my app fully functioning with universal color modes, with a very simple transition to adding more color modes. Simply add the pallette you want, there's 6 total colors, and it passes them in to the corresponding part via prop drilling, you just have to configure a way to switch the color mode like an onClick and put it in a function to set the colors to that pallete. <br/><br/> Working to get the windows scroll width is proving to be somewhat difficult in react. I think if I can access the window element that my help because the body element is not having any distinction between full width and the widths that are supposed to be full width less the scroll bar.",
        "id": "5"
    },
    {
        "header": "CSS KeyFrames",
        "date": "8/30/21",
        "time": "10:17pm",
        "body": "Today I worked with Keyframes, the essential things to remember is everything has an 'animation-name'. So you define it in the css selector and then in the keyFrame you put @keyframes name { and then put the from and to tags in there. You can also use percentages to control what the animation should look like at said percent of the animation time. <br/><br/> Very simple @keyframes name from {transform: scaleY(1)} to {transform: scaleY(-1)} or @keyframes name 0% {transform: scaleY(1)} 20% {transform: scaleY(-1)} 100% {transform: scaleY(1)} <br/><br/> For the top section of Apotheosis rather than trying to curve the background I just create a background Image in photoshop with the curves in it. As it stands until it get's easier to perform things like that in CSS, or I find something I didn't know of it's probably easier to just import images, and make separate one's for media queries where neccessary.",
        "id": "6"
    },
    {
        "header": "Into the Blockchain",
        "date": "8/31/2021",
        "time": "4:27pm",
        "body": "As my fingers were itching to write some code and my interest in blockchain is growing I decided I would begin coding some blockchain. My main goal with this outside of learning more about the blockchain and how to build cryptocurrencies is to as a bi product become more fluent with Python. I'm going to start off on the Ethereum ecosystem and eventually come full circle coding in the Cardano and Polkadot ecosystems as well. <br/><br/> I may go into this expecting one thing and end up with another. <br/><br/> ICO is initial coin offering just like IPO is initial public offering. <br/><br/> The ERC-20 standard is a standard that governs how an ethereum token should be built. It can be found at the ethereum github <a href='https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md'>here.</a> <br/><br/> Solidity Data Types: <br/><br/> &emsp; bool trueOrFalse = true; <br/><br/> &emsp; int(Signed integer) / uint(unSigned Integer) and the number represents bits, bits are not the same thing as length. More on the purpose of that later. Update me. <br/> &emsp; uint8 number = 2; <br/> &emsp; uint64 number = 5999; <br/> &emsp; uint256 number = 837509758; <br/> &emsp; uint number = 5999; (uint and int default to uint256 and int256 respectively). <br/><br/> &emsp; string basicString = 'hello'; <br/><br/> &emsp; string[] basicStringArray = ['hello', 'hi']; <br/> &emsp; uint[] basicNumArray = [7, 5]; (does not appear to work with int as well) <br/><br/> A struct is basically your own custom type in solidity: <br/><br/> Person public danny; <br/><br/> struct Person { <br/> &emsp; string firstName; <br/> &emsp; string lastName; <br/> &emsp; string email; <br/> &emsp; string age; <br/> } <br/><br/> function doThings() public { <br/> &emsp; danny = Person({ <br/> &emsp;&emsp; firstName: 'Danny', <br/> &emsp;&emsp; lastName: 'Phantom', <br/> &emsp;&emsp; email: 'danPhantom99@yahoo.com',<br/> &emsp;&emsp; age: 19 <br/> &emsp; }); <br/> } <br/><br/> Mappings appear to convert a address to an integer (and look to have other conversion use cases as well). <br/><br/> mapping(address => uint) public balances;",
        "id": "7"
    },
    {
        "header": "Getting Element widths in react properly, Nav Dropdown Hover Effects + More  ",
        "date": "9/1/21",
        "time": "6:17pm",
        "body": "I am currently working on getting the width of the nav link container for Apotheosis Marketing so I can assign that width to the dropdown div, in jquery I'd know basically exactly how to do this but I'm trying to determine whether there's a better way to do it in React or not. <br/><br/> Going to try offsetWidth rather than clientWidth. I found a solution I quite like but the truth is the first version was probably adequete lol. The problem was I did not put 'px' after the value in the style attributes for top and width. Working now. <br/><br/> Next steps is getting it to update dynamically when we change the size of page without refreshing page. In other words, triggering a re render whenever page size changes. We created an event listener for window resize which fixed it. Here's the syntax: <br/><br/> useEffect(()=>{<br/>&emsp;const handleResize = () => {<br/> &emsp;&emsp;setNavLinksContainerWidth(navLinksContainerRef!.current!.offsetWidth)<br/> &emsp;&emsp; setNavHeight(mainNavbarRef!.current!.offsetHeight)<br/> &emsp;}<br/> &emsp; window.addEventListener('resize', handleResize)<br/>}) <br/><br/> But now I have a tiny gap between dropdown and navbar that seems to have reponsive size on change which indicates we have a strange error. Going to try a hard code fix first and see. Subtracted one pixel seems to be working well now. Minus .1 worked even better. Strange issue in general. Trying to make css modular in the way the correct dropdown shows up when you hover the link. Looks like most likely will have to build a dropdown component and would really be very easy. Yes solved it that way. Perfect! Looking great, been adding more features to the navbar. Figured out the way to create dropdown arrow with after psuedo just using css borders. Code: <br/><br/> .nav-dropdown-link::after {<br/>&emsp;content: '';<br/>&emsp;border-left: $arrowLeftRightBorder solid transparent;<br/>&emsp;border-right: $arrowLeftRightBorder solid transparent;<br/>&emsp;border-top: .4vw solid rgb(231, 231, 231);<br/>&emsp;margin-top: auto;<br/>&emsp;margin-bottom: auto;<br/>&emsp;margin-left: .6vw;<br/>} <br/><br/> And then to add a hover effect to an after tag you use this selector: <br/><br/> .class:hover::after. <br/><br/> Ran into issue of mouseEnter and mouseLeave on the nav dropdown and actually keeping the links up if either the link or dropdown were hovered. Solved it by adding a hoveredState to each element and then adding a useEffect on each state and making it so if both were false then toggle navbar to normal else keep the dropdown menu up. Here's the code: <br/><br/> useEffect(()=>{<br/>&emsp;if(!linkHovered && !dropdownHovered) {<br/>&emsp;&emsp;setVisibility('none');<br/>&emsp;&emsp;setDropdownArrowRotation('0deg');<br/>&emsp;} else {<br/>&emsp;&emsp;setVisibility('flex');<br/>&emsp;&emsp;setDropdownArrowRotation('180deg');<br/>&emsp;}<br/>}, [linkHovered, dropdownHovered]) <br/><br/> Once I created this rule it was easy to add an OnClick toggle function for the link that just swapped the linkHovered state to true. Doesn't disrupt anything as the other functions have specific mouseEnter and mouseLeave commands vs. a toggle command depending on what the state already was. <br/><br/> Now just need to turn off the shading of the element when I click it for safari tablet. <br/><br/> That's a problem for tomorrow, very happy with the progress we've made today. Also still a bit of a glitch in iPad requiring double clicks to open dropdowns. Seems to have to do with running onClick and mouseEnter at the same time. Definitely is that. Need to be able to check our device type inside of the function and create if statement for it.",
        "id": "8"
    },
    {
        "header": "",
        "date": "",
        "time": "",
        "body": "",
        "id": "9"
    },
    {
        "header": "",
        "date": "",
        "time": "",
        "body": "",
        "id": "10"
    },
    {
        "header": "",
        "date": "",
        "time": "",
        "body": "",
        "id": "11"
    }
]